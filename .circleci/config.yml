version: 2

job_common: &job_common
  docker:
    - image: circleci/node:10.12-stretch
  working_directory: ~/colonyNetwork
step_save_cache: &step_save_cache
  save_cache:
    paths:
      - ~/.cache/yarn
    key: node-modules-{{ checksum "yarn.lock" }}
step_restore_cache: &step_restore_cache
  restore_cache:
    keys:
      - node-modules-{{ checksum "yarn.lock" }}
step_setup_global_packages: &step_setup_global_packages
  run:
    name: "Set up global packages"
    command: |
      yarn --pure-lockfile --network-concurrency 1
      git submodule update --remote --init
      yarn run provision:token:contracts
step_pull_solc_docker: &step_pull_solc_docker
    run:
      name: "Pull solc docker image"
      command: docker pull ethereum/solc:0.4.23
step_pull_mythril_docker: &step_pull_mythril_docker
    run:
      name: "Pull mythril dev docker image"
      command: docker pull mythril/myth
jobs:
  lint-and-unit-test:
    <<: *job_common
    steps:
      - checkout
      - <<: *step_restore_cache
      - setup_remote_docker
      - <<: *step_pull_solc_docker
      - <<: *step_setup_global_packages
      - run:
          name: "Setup parity"
          command: |
            wget https://releases.parity.io/ethereum/v1.11.8/x86_64-unknown-debian-gnu/parity_1.11.8_debian_amd64.deb
            sudo dpkg -i parity_1.11.8_debian_amd64.deb
            echo "password" > parityPassword
            cp ./parity-genesis.template.json ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef01/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef02/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef03/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef04/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef05/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef06/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef07/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef08/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef09/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef10/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef11/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
            sed -i "s/000000000000000000000000000000deadbeef12/$(parity account new --chain ./parity-genesis.json --keys-path ./keys --password ./parityPassword)/g" ./parity-genesis.json
      - run:
          name: "Install lsof"
          command: |
            sudo apt-get update
            sudo apt-get install lsof
      - run:
          name: "Linting JavaScript"
          command: yarn run eslint
      - run:
          name: "Linting Solidity"
          command: yarn run solium
      - run:
          name: "Checking contract storage variables"
          command: yarn run check:storagevars
      - run:
          name: "Checking contract recovery modifiers"
          command: yarn run check:recoverymods
      - run:
          name: "Running unit tests"
          command: yarn run test:contracts
      - run:
          name: "Running upgrade tests"
          command: yarn run test:contracts:upgrade:parity && yarn run test:contracts:upgrade:ganache
      - run:
          name: "Running gas cost tests"
          command: yarn run test:contracts:gasCosts
      - run:
          name: "Running patricia tree tests"
          command: yarn run test:contracts:patricia
      - <<: *step_save_cache
      # Save test results
      - store_test_results:
          path: test-results.xml
      - store_artifacts:
          path: test-results.xml
  test-coverage:
    <<: *job_common
    steps:
      - checkout
      - <<: *step_restore_cache
      - setup_remote_docker
      - <<: *step_pull_solc_docker
      - <<: *step_setup_global_packages
      - run:
          name: "Running unit tests with coverage"
          command: yarn run test:contracts:coverage
      # Save coverage artifacts
      - store_artifacts:
          path: coverage
  security-analysis:
    <<: *job_common
    steps:
      - checkout
      - <<: *step_restore_cache
      - setup_remote_docker
      - <<: *step_pull_solc_docker
      - <<: *step_pull_mythril_docker
      - <<: *step_setup_global_packages
      - run:
          name: "Mythril security analysis"
          command: |
            docker create -v "$pwd"/build --name colonynetwork alpine:3.4 /bin/true
            docker cp build/* colonynetwork:/build
            docker run --volumes-from colonynetwork mythril/myth myth --truffle --execution-timeout 40 -v 3
  run-smt-checker:
    <<: *job_common
    steps:
      - checkout
      - <<: *step_restore_cache
      - <<: *step_setup_global_packages
      - git clone --depth 1 --recursive -b release https://github.com/ethereum/solidity/commit/59dbf8f1085b8b92e8b7eb0ce380cbeb642e97eb
      - run:
          name: "Running unit tests with SMT checker"
          command: yarn run test:contracts
      # Save check results
      - store_test_results:
          path: test-results-smt-checker.xml
      - store_artifacts:
          path: test-results-smt-checker.xml
workflows:
  version: 2
  commit:
    jobs:
      - lint-and-unit-test
      - test-coverage
  nightly:
    triggers:
      - schedule:
          cron: "0 1 * * *" # 1am UTC
          filters:
            branches:
              only:
                - develop
    jobs:
      - security-analysis
    # TODO reenable these jobs after smt checker config is done  
    #  - lint-and-unit-test
    #  - test-coverage
      - run-smt-checker
